<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://iampukar.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://iampukar.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-07-21T18:00:01+00:00</updated><id>https://iampukar.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">The Rise of Liquid Restaking Tokens</title><link href="https://iampukar.github.io/blog/2024/liquid-restaking-tokens/" rel="alternate" type="text/html" title="The Rise of Liquid Restaking Tokens"/><published>2024-07-17T11:46:00+00:00</published><updated>2024-07-17T11:46:00+00:00</updated><id>https://iampukar.github.io/blog/2024/liquid-restaking-tokens</id><content type="html" xml:base="https://iampukar.github.io/blog/2024/liquid-restaking-tokens/"><![CDATA[<h2 id="introduction-to-restaking">Introduction to Restaking</h2> <p>Blockchains face a significant challenge known as the cold start problem—the difficulty of gaining initial momentum for a new network. This is particularly crucial in a distributed system where security and efficiency depend on widespread participation. Attracting users and securing the network can be an uphill battle without an initial base of validators and users.</p> <p>Enter restaking, an innovative approach that involves taking assets already staked to secure a blockchain network and repurposing them to secure additional external systems. This efficient use of resources improves the security of multiple platforms without requiring users to invest additional capital.</p> <h2 id="the-concept-of-liquid-restaking">The Concept of Liquid Restaking</h2> <p>Restaking is an approach to securing a blockchain network by allowing users to use their assets to protect external services. This method leverages existing staked assets, such as Ether (ETH), Liquid Staking Tokens (LSTs), or other tokens, and repurposes them to secure additional networks or services.</p> <h3 id="distinction-between-lst-and-lrt">Distinction between LST and LRT</h3> <p><strong>Liquid Staking Tokens (LSTs):</strong> LSTs represent staked assets in iquid form. These tokens are created when users stake their crypto assets (e.g., ETH) on a network and receive a token that represents their staked position. This allows them to continue participating in DeFi activities while still earning staking rewards. For example, staking ETH on a platform and receiving stETH, a token that represents the staked ETH, is an example of liquid staking.</p> <p><strong>Liquid Restaking Tokens (LRTs):</strong> LRTs are a subset of LSTs used specifically in the context of restaking. Restaking involves taking these already-staked assets and using them to secure additional external services or networks. Essentially, LRTs are LSTs that have an extra layer of utility, as they not only represent staked assets but also the additional security provided to other platforms through restaking.</p> <p>Since LRTs originate from liquid staking tokens and add an extra layer of functionality, every LRT starts as an LST. While all LRTs are liquid staking tokens, not every LST is used for restaking. LSTs may only provide liquidity and staking rewards, without the additional security role that LRTs fulfill.</p> <h3 id="restaking-process">Restaking Process</h3> <ol> <li> <p>Staking Assets: Initially, users stake or lock their crypto assets (e.g., ETH) in a primary blockchain network like Ethereum to help secure and validate the network. This process earns them rewards.</p> </li> <li> <p>Restaking: Users can then restake these already staked assets on platforms like EigenLayer. Their staked assets now also secure other external services, such as rollups, oracles, and bridges.</p> </li> <li> <p>Receiving LRTs: In return for restaking their assets, users receive LRTs, which represent their stake and can be used within various decentralized finance (DeFi) applications.</p> </li> </ol> <h3 id="types-of-restaking">Types of Restaking</h3> <ul> <li> <p>Native Restaking: This process involves setting an Ethereum validator’s withdrawal credentials to EigenLayer’s smart contracts, or EigenPod. To participate in native restaking, users must operate an Ethereum Validator node.</p> </li> <li> <p>Liquid Restaking: In this method, users deposit liquid staking tokens (LSTs) and EIGEN tokens into EigenLayer smart contracts. Unlike native restaking, this doesn’t require operating a validator node.</p> </li> </ul> <h2 id="the-role-of-eigenlayer">The Role of EigenLayer</h2> <p>EigenLayer is at the forefront of improving the efficiency of staked assets in the blockchain ecosystem. The primary goal of EigenLayer is to enhance the utility and security of staked Ether (ETH) by allowing it to support multiple systems simultaneously, not just the Ethereum network. This approach maximizes the economic value and security provided by staked assets.</p> <p>As of July 14, 2024, EigenLayer has secured over $15 billion in total value locked (TVL), making it a leader in the liquid restaking token (LRT) space. The broader liquid restaking category now includes over 20 different protocols, highlighting the growing adoption and importance of restaking mechanisms in the cryptocurrency landscape. New entrants like Renzo, Puffer Finance, and Kelp are contributing to the ongoing evolution and expansion of the liquid restaking ecosystem.</p> <p>EigenLayer contracts feature a 7-day withdrawal delay for LST tokens and native restaking to enhance the security of their ecosystem. The withdrawal window for the EIGEN token is 24 days to support future planned functionality unique to the token. By utilizing these restaking processes, users can maximize the utility and security of their staked assets, contributing to a more robust and secure blockchain ecosystem.</p> <h3 id="key-components-of-eigenlayer">Key Components of EigenLayer</h3> <ul> <li> <p>Actively Validated Services (AVS): AVS are external systems or applications that require their own distributed validation semantics for verification and rely on the security provided by staked assets. These services can include rollups, oracles, bridges, and other blockchain-based applications. EigenLayer extends the security benefits of staked ETH by integrating with AVS to these external services, thereby increasing their reliability and robustness.</p> </li> <li> <p>Operators: Operators are entities or individuals who run the AVS software and are responsible for validating the tasks and processes within it. They register in EigenLayer and allow ETH stakers to delegate their staked assets to them in the form of native ETH or LSTs, then opt in to provide various services (AVSs), enhancing the overall security and functionality of their networks.</p> <p>Becoming an operator in the EigenLayer ecosystem does not require a specific amount of delegated, restaked TVL. Any Ethereum address can serve as an operator. An address can function as both a restaker, engaging in either liquid or native restaking, and an operator simultaneously. An operator can participate in the EigenLayer network without having any restaked tokens.</p> </li> <li> <p>Restakers: Restakers are users who restake native ETH or Liquid Staking Tokens (LSTs) to the EigenLayer protocol. By doing so, they enhance the security and efficiency of multiple systems while earning rewards.</p> </li> </ul> <h2 id="benefits-of-liquid-restaking-tokens-lrts">Benefits of Liquid Restaking Tokens (LRTs)</h2> <p>Restaking allows Ethereum validators to join branched consensus networks of various applications. By shifting the responsibility of securing these applications to AVS operators, who are more secure both technically and organizationally, the risk of attacks is reduced, thus enhancing overall security. Without such architecture, decentralized platforms often rely on vulnerable third-party solutions like cross-chain bridges or oracles, which have been frequent targets in DeFi hacks and exploits.</p> <p>To become an AVS operator, an entity must first be an Ethereum validator, requiring a deposit of 32 ETH and specific technical expertise and equipment, which limits participation opportunities. EigenLayer mitigates this problem by allowing users to deposit assets into a pool while operators handle the technical work, similar to how Liquid Staking Derivatives (LSD) protocols function. LRT protocols further add liquid tokens to the chain, enabling greater capital utilization in DeFi operations. This encourages more restakers to join and more AVS operators to emerge, making these services more accessible.</p> <h3 id="enhancing-ethereum-staking">Enhancing Ethereum Staking</h3> <p>Liquid restaking protocols present a new opportunity to invigorate Ethereum’s staking ecosystem. Unlike traditional liquid staking protocols, which use user-deposited ETH solely for securing the proof-of-stake chain, liquid restaking protocols utilize funds to validate various AVSes, extending the security benefits of staked ETH to a broader range of blockchain applications. This democratizes the staking landscape and challenges the dominance of established liquid staking leaders.</p> <h3 id="simplifying-the-staking-process">Simplifying the Staking Process</h3> <p>Running a validator node involves complex tasks such as managing infrastructure, monitoring status, and addressing downtime, requiring technical expertise. Liquid restaking protocols simplify this process by managing these complexities behind the scenes. This makes it easier for individuals to participate in staking and benefit from the rewards without needing extensive technical knowledge.</p> <h3 id="demand-for-a-higher-eth-yield">Demand for a Higher ETH Yield</h3> <p>There is substantial demand for enhanced yields, and the LRT market is well-positioned to capitalize on this growing demand. By providing higher returns through diversified staking opportunities, LRTs attract users seeking better rewards within a reasonable risk spectrum.</p> <h3 id="gas-efficiency">Gas Efficiency</h3> <p>Restaking can validate various services, distributing enhanced rewards to AVS operators and indirectly to restakers. These rewards include ETH and other tokens. However, this process can become highly gas-intensive on the resource-limited Ethereum Layer 1. In contrast, LRTs can batch-collect rewards for the entire pool and distribute them efficiently among protocol holders, conserving user resources. This gas-efficient approach ensures that users receive maximum benefits with minimal transaction costs, making the system more sustainable and user-friendly.</p> <h2 id="risk-management-and-complexity">Risk Management and Complexity</h2> <p>Despite their benefits, LRTs are not without risks. Here are some key concerns:</p> <h3 id="systemic-risks">Systemic Risks</h3> <p>Any flaws in restaking mechanisms or underlying protocols could jeopardize Ethereum’s security and stability. Vulnerabilities in restaking processes can undermine the network’s integrity, causing potential downtimes or security breaches that affect the entire DeFi ecosystem reliant on Ethereum’s stability.</p> <h3 id="impact-on-ethereum-consensus">Impact on Ethereum Consensus</h3> <p>The creation of financial primitives like LRTs may affect Ethereum validators. Issues such as slashing nodes from third-party projects and expanding the validator set due to higher rewards could impact the Ethereum transaction finalization process.</p> <h3 id="decoupling-risks">Decoupling Risks</h3> <p>LRTs are susceptible to decoupling from the underlying value of staked assets, causing mispricing, liquidity challenges, and potential losses for LRT holders. Inaccurate valuation of LRTs can introduce additional risks when used as collateral in DeFi protocols, potentially triggering liquidations or compromising platform stability.</p> <h3 id="demand-and-sustainability">Demand and Sustainability</h3> <p>The long-term success of LRTs hinges on the actual demand for AVS operator services. If demand is insufficient, liquid restaking providers may struggle to integrate into the current blockchain infrastructure and create a sustainable economic model.</p> <h3 id="economic-implications">Economic Implications</h3> <p>The increasing appeal of passive income via LRT protocols could lead to a supply shock for native ETH, potentially causing a liquidity crisis. If the current trend continues, a sudden shift in supply dynamics could push investors away and destabilize the market.</p> <h2 id="conclusion">Conclusion</h2> <p>Liquid Restaking Tokens (LRTs) offer a promising solution for enhancing blockchain security and efficiency. They provide significant benefits by maximizing the utility of staked assets and democratizing the staking process. However, the associated risks—ranging from systemic vulnerabilities to economic implications—must be carefully managed. As the LRT ecosystem evolves, the sustainability and security of these protocols will depend on the actual demand for AVS operator services and the robustness of the underlying infrastructure. By understanding and addressing these risks, the potential of LRTs can be fully realized, contributing to a more secure and efficient blockchain environment.</p> <p><em>The <a href="https://www.linkedin.com/pulse/rise-liquid-restaking-pukar-acharya-9wpjf/">original article</a> was published on LinkedIn.</em></p>]]></content><author><name></name></author><category term="Web3"/><category term="liquid-restaking-tokens"/><category term="Web3"/><category term="security"/><summary type="html"><![CDATA[Learn how Liquid Restaking Tokens (LRTs) are revolutionizing blockchain security and efficiency by repurposing staked assets.]]></summary></entry><entry><title type="html">Understanding the UwU Lend Exploit</title><link href="https://iampukar.github.io/blog/2024/uwu-lend-exploit/" rel="alternate" type="text/html" title="Understanding the UwU Lend Exploit"/><published>2024-06-11T11:46:00+00:00</published><updated>2024-06-11T11:46:00+00:00</updated><id>https://iampukar.github.io/blog/2024/uwu-lend-exploit</id><content type="html" xml:base="https://iampukar.github.io/blog/2024/uwu-lend-exploit/"><![CDATA[<h2 id="tldr">TL;DR</h2> <p>On June 10, 2024, UwU Lend was exploited across three different transactions on the Ethereum Mainnet due to a smart contract vulnerability, which resulted in a loss of over 5272 ETH, totaling approximately $23 million.</p> <h2 id="introduction-to-uwu-lend">Introduction to UwU Lend</h2> <p>UwU Lend is a decentralized, non-custodial liquidity market protocol where users can participate as depositors, borrowers, or LP stakers.</p> <h2 id="vulnerability-assessment">Vulnerability Assessment</h2> <p>The root cause of the exploit is due to the manipulation of the price oracle.</p> <h3 id="steps">Steps</h3> <p><strong>Step 1:</strong></p> <p>We attempt to analyze <a href="https://etherscan.io/tx/0xca1bbf3b320662c89232006f1ec6624b56242850f07e0f1dadbe4f69ba0d6ac3">one of the attack transaction</a> executed by <a href="https://etherscan.io/address/0x841ddf093f5188989fa1524e7b893de64b421f47">the exploiter</a>.</p> <p><strong>Step 2:</strong></p> <p>The vulnerable and exploited contract is actually a fork of AAVE v2, but the UwU protocol <a href="https://contract-diff.xyz/?address=0x05bfa9157e92690b179033ca2f6dd1e86b25ea4d&amp;chain=0">made some changes</a> to the fallback oracle.</p> <p><strong>Step 3:</strong></p> <p>The attacker initially took a flash loan of roughly $3.796 billion worth of assets from AAVE V3, AAVE V2, Uniswap V3, Balancer, Maker, Spark, and Morpho. Researchers within the DeFi security community cite that this is probably one of the largest ever borrowed amounts for a particular trade.</p> <p><strong>Step 4:</strong></p> <p>Approximately half of these borrowed assets <a href="https://x.com/CertiKAlert/status/1800195391214022672">were used to</a> create a leveraged position through recursive borrowing, in which the attacker held a huge amount of sUSDE debt.</p> <p><strong>Step 5:</strong></p> <p>The sUSDE price fetched through the <a href="https://etherscan.io/address/0xd252953818bdf8507643c237877020398fa4b2e8#code">sUSDePriceProviderBUniCatch contract</a> on UwU Lend uses the median of 11 different price sources, out of which five (FRAXUSDe, USDeUSDC, USDeDAI, USDecrvUSD, and GHOUSDe) could be easily manipulated using CurveFinance pools. This is possible because these oracles provide the price of the assets given the current state of the pool, such as their token balance, which can be easily manipulated.</p> <pre><code class="language-solidity">function getPrice() external view override returns (uint256) {
  (uint256[] memory prices, bool uniFail) = _getPrices(true);

  uint256 median = uniFail ? (prices[5] + prices[6]) / 2 : prices[5];

  require(median &gt; 0, "Median is zero");

  return FullMath.mulDiv(median, sUSDeScalingFactor, 1e3);
}
</code></pre> <pre><code class="language-solidity">function _getPrices(bool sorted) internal view returns (uint256[] memory, bool uniFail) {
  uint256[] memory prices = new uint256[](11);
  (prices[0], prices[1]) = _getUSDeFraxEMAInUSD();
  (prices[2], prices[3]) = _getUSDeUsdcEMAInUSD();
  (prices[4], prices[5]) = _getUSDeDaiEMAInUSD();
  (prices[6], prices[7]) = _getCrvUsdUSDeEMAInUSD();
  (prices[8], prices[9]) = _getUSDeGhoEMAInUSD();
  try UNI_V3_TWAP_USDT_ORACLE.getPrice() returns (uint256 price) {
    prices[10] = price;
  } catch {
    uniFail = true;
  }

  if (sorted) {
    _bubbleSort(prices);
  }

  return (prices, uniFail);
}
</code></pre> <p><strong>Step 6:</strong></p> <p>The other half of the earlier borrowed assets were used to manipulate the price of five oracles in reference so that the price of sUSDE was deemed more expensive than usual, which made the position insolvent. On the Curve Finance oracles, the price of sUSDE while borrowing was about 0.9, but the liquidation price stood at 1.03.</p> <p><strong>Step 7:</strong></p> <p>The attacker repeatedly liquidated the position to acquire uWETH, then reversed the manipulated asset price and repaid the flash loan to complete the attack and secure their profits.</p> <p><strong>Step 8:</strong></p> <p>These are the other two attack transactions in reference, <a href="https://etherscan.io/tx/0x242a0fb4fde9de0dc2fd42e8db743cbc197ffa2bf6a036ba0bba303df296408b">one of which</a> yielded the attacker approximately $7.2 million, while the attacker profited by roughly $7.6 million from <a href="https://etherscan.io/tx/0xb3f067618ce54bc26a960b660cfc28f9ea0315e2e9a1a855ede1508eb4017376">the other</a> attack transactions.</p> <p><strong>Step 9:</strong></p> <p>The stolen funds include assets in USDT, FRAX, bLUSD, and DAI, all of which were swapped for ETH and then split into two different EOAs, <a href="https://etherscan.io/address/0x48D7C1dd4214B41EDa3301BCA434348F8d1C5EB6">this</a> and <a href="https://etherscan.io/address/0x050c7E9c62Bf991841827F37745DDaDb563FEB70">this</a>. At the time of this writing, <a href="https://etherscan.io/address/0x48D7C1dd4214B41EDa3301BCA434348F8d1C5EB6">this address</a>, likely controlled by the attacker, has a hold of 1,282.9877 ETH, which is worth approximately $4,559,443.66. The <a href="https://etherscan.io/address/0x050c7E9c62Bf991841827F37745DDaDb563FEB70">other address</a> has a hold of 4,010 ETH, which is worth $14,242,406.</p> <p><strong>Step 10:</strong></p> <p>According to <a href="https://x.com/UwU_Lend/status/1800444603692376400">the team</a>, the total loss suffered by the protocol stands at $23 million, which includes 481.357407 WETH worth $1,704,005; 17.629563 WBTC worth $1,191,564; 499,254.38 bLUSD worth $592,614.95; 233,819.07 crvUSD worth $233,567.96; 1,394,055.37 sDAI worth $1,516,553.58; 25,354,902.10 CRV worth $9,381,313.80; 3,522,427.55 DAI worth $3,520,853.90; 4,224,277.30 USDT worth $4,223,114.99; and 486,455.22 sUSDe worth $525,371.64.</p> <h2 id="aftermath">Aftermath</h2> <p>The <a href="https://x.com/UwU_Lend/status/1800159455767843009">team acknowledged</a> the occurrence of the exploit and stated that they paused their protocol to contain the damage caused by the exploit. The attacker deposited much of the stolen assets into <a href="https://x.com/CurveFinance/status/1800269737563451705">Curve Finance-based Llama Lend Market</a>, only to later face a hard liquidation, and their position was completely liquidated.</p> <p>The team has further sent an <a href="https://etherscan.io/tx/0x31e5c9a15ce5697c9680cfdeaf5eda60379923d751d3b5eb685b28448d083f97">on-chain message</a> to the exploiter with hopes of retrieving 80% of the stolen funds in exchange for a 20% white hat bounty reward.</p> <h2 id="solution">Solution</h2> <p>To address the vulnerabilities exposed by the UwU Lend exploit, a comprehensive reassessment of the protocol’s price oracle implementation is essential. The use of a median of 11 price feeds, while initially seeming robust, proved insufficient due to the low liquidity and lack of price smoothing in half of these feeds. This allowed the attacker to manipulate the prices easily. A more resilient approach would involve the exclusion of low liquidity feeds or the integration of sophisticated smoothing and weighting mechanisms that enhance the oracle’s resistance to manipulation, thereby increasing the costs and efforts required for an attack.</p> <p>Curve Finance, <a href="https://resources.curve.fi/factory-pools/understanding-oracles/#profits-and-liquidity-balances">aware of the potential for manipulation in their pools</a>, explicitly advises against using them as standalone price oracles. They incorporate certain protections, like the update of the price oracle only once per block and an exponential moving average to dampen rapid changes. However, these measures alone were not enough to prevent the manipulation seen in the UwU Lend exploit. To build on these foundational measures, protocols should consider using more robust solutions, such as those provided by <a href="https://chain.link/education-hub/blockchain-vs-oracles">ChainLink</a>. ChainLink offers <a href="https://blog.chain.link/using-chainlink-oracles-to-securely-utilize-curve-lp-pools/">detailed methodologies</a> for securely integrating price feeds from liquidity pools, including those based on Curve, which can significantly reduce the risk of similar exploits.</p> <p>The incident also highlights the critical risks associated with <a href="https://github.com/YAcademy-Residents/defi-fork-bugs">DeFi protocol forks</a>. In this case, UwU Lend was a fork of AAVE v2 but had altered the fallback oracle without fully addressing the security implications of such changes. This oversight underscores the importance of thorough security audits and stress testing, especially when protocols make substantial modifications to their codebase. These audits should not only check for direct vulnerabilities but also evaluate the broader security architecture’s resilience against complex attack vectors like those involving multiple DeFi platforms.</p> <p>Furthermore, the massive scale of the flash loan used in this attack — amounting to nearly $3.796 billion — should have raised immediate red flags. Protocols can implement monitoring systems that trigger alerts or enforce limits when unusually large transactions or flash loans occur. Such systems could include dynamic restrictions that adjust based on typical transaction sizes and frequencies, providing an additional layer of security without hindering normal protocol operations.</p> <p><em>This article was <a href="https://medium.com/p/b32ea552f030">originally published</a> by Pukar Acharya for Neptune Mutual.</em></p>]]></content><author><name></name></author><category term="blockchain-hacks"/><category term="oracle-manipulation"/><category term="uwu-lend"/><summary type="html"><![CDATA[Learn how UwU Lend was exploited, which resulted in a loss of assets worth $23 million.]]></summary></entry><entry><title type="html">How Was Steam Swap Exploited?</title><link href="https://iampukar.github.io/blog/2024/steam-swap-exploit/" rel="alternate" type="text/html" title="How Was Steam Swap Exploited?"/><published>2024-06-08T11:46:00+00:00</published><updated>2024-06-08T11:46:00+00:00</updated><id>https://iampukar.github.io/blog/2024/steam-swap-exploit</id><content type="html" xml:base="https://iampukar.github.io/blog/2024/steam-swap-exploit/"><![CDATA[<h2 id="tldr">TL;DR</h2> <p>On June 6, 2024, Steam Swap was exploited across two different transactions on the BNB chain due to a smart contract vulnerability, which resulted in a loss of assets worth approximately $105,000.</p> <h2 id="introduction-to-steam-swap">Introduction to Steam Swap</h2> <p>Steam Swap is a decentralized digital asset trading platform dedicated to bridging the global digital asset trading markets.</p> <h2 id="vulnerability-assessment">Vulnerability Assessment</h2> <p>The root cause of the exploit is due to the price manipulation of the underlying assets.</p> <h3 id="steps">Steps</h3> <p><strong>Step 1:</strong></p> <p>We attempt to analyze <a href="https://app.blocksec.com/explorer/tx/bsc/0x40f3bdd0a3a8d0476ae6aa2875dc2ec60b80812e2a394b67a88260df57c65522">one of the attack transactions</a> executed by <a href="https://bscscan.com/address/0xb5f1f0f3e9e72f94db32e8fcddde972ebfdc748e#tokentxns">the exploiter</a>.</p> <p><strong>Step 2:</strong></p> <p>The <a href="https://bscscan.com/address/0xb7d0a1adafa3e9e8d8e244c20b6277bee17a09b6#code">vulnerable MineSTM contract</a> has a <a href="https://bscscan.com/address/0xb7d0a1adafa3e9e8d8e244c20b6277bee17a09b6#code#F1#L633">sell function</a> that uses a reserve pair for liquidity calculation. Notably, this exploited contract was deployed roughly 16 hours before the incident took place.</p> <pre><code class="language-solidity">function sell(uint256 amount) external {
  eve_token_erc20.transferFrom(msg.sender, address(this), amount);
  (, uint256 r1, ) = inner_pair.getReserves();
  uint256 lpAmount = (amount * inner_pair.totalSupply()) / (2 * r1);
  uniswapV2Router.removeLiquidity(address(usdt_token_erc20), address(eve_token_erc20), lpAmount, 0, 0, msg.sender, block.timestamp);
}
</code></pre> <p><strong>Step 3:</strong></p> <p>The exploiter initially took a flash loan of 500,000 BSC-USD and used it to purchase roughly 2,740,041 STM tokens. The exploiter was able to manipulate this reserve balance by swapping a large amount of these tokens, and then ultimately called the above sell function to complete their attack.</p> <p><strong>Step 4:</strong></p> <p>The excess of the STM tokens were sold for profits worth approximately $91,670 before repaying the borrowed flash loan.</p> <p><strong>Step 5:</strong></p> <p><a href="https://bscscan.com/address/0x40a82dfdbf01630ea87a0372cf95fa8636fcad89">Another attacker</a>, likely a copycat of the original exploiter, executed <a href="https://bscscan.com/tx/0x849ed7f687cc2ebd1f7c4bed0849893e829a74f512b7f4a18aea39a3ef4d83b1">yet another attack transaction</a> to profit by roughly $13,892.</p> <h2 id="solution">Solution</h2> <p>The recent exploit of Steam Swap underscores the vital need for comprehensive security measures in smart contracts, especially given the sophisticated nature of this particular attack. Addressing the vulnerability observed in the reserve liquidity pair requires implementing stricter validations when processing sell functions in contracts. This could involve more robust calculations of liquidity based on accurate, real-time reserve checks, potentially integrating mechanisms like time-weighted averages to mitigate the risk of price manipulation.</p> <p>Preventing price manipulation is critical, and one effective strategy is employing ChainLink like Oracle services to provide reliable price feeds rather than solely depending on internal reserves, which can be easily distorted through market maneuvers such as flash loans.</p> <p>The fact that the contract was exploited shortly after its deployment raises concerns about its initial security measures. It suggests the possibility of an inside job or a deliberate act to deceive, leading to a potential rug-pull. These suspicions are compounded by the absence of a prior security audit, a standard practice that was surprisingly overlooked. Given the associations with reputable names like Uniswap, Binance, Metamask, and Andreessen Horowitz, the lack of initial auditing raises questions about the legitimacy of the operation and whether these partnerships were superficially used to gain trust.</p> <p>In <a href="https://x.com/SteamSwap_/status/1798832744816054592">response to the attack</a>, the team’s decision to conduct a post-incident audit, although a step in the right direction, comes too late for those affected by the exploit. The timeline for this audit, set at 7–10 business days, reflects urgency but also highlights the absence of proactive security measures. This incident serves as a stark reminder of the need for thorough vetting and continuous security assessments of smart contracts to avoid such vulnerabilities and maintain trust within the trading community. The ultimate determination of whether this was a high-level scam designed to lure traders and liquidity providers will depend on the outcomes of the ongoing investigations and audits.</p> <p><em>This article was <a href="https://medium.com/p/adb10ffe55bc">originally published</a> by Pukar Acharya for Neptune Mutual.</em></p>]]></content><author><name></name></author><category term="blockchain-hacks"/><category term="price-manipulation"/><category term="steam-swap"/><summary type="html"><![CDATA[Learn how Steam Swap was exploited, resulting in a loss of assets worth approximately $105,000.]]></summary></entry><entry><title type="html">Breaking down the 219M Gala Games Exploit</title><link href="https://iampukar.github.io/blog/2024/gala-games-exploit/" rel="alternate" type="text/html" title="Breaking down the 219M Gala Games Exploit"/><published>2024-05-21T11:46:00+00:00</published><updated>2024-05-21T11:46:00+00:00</updated><id>https://iampukar.github.io/blog/2024/gala-games-exploit</id><content type="html" xml:base="https://iampukar.github.io/blog/2024/gala-games-exploit/"><![CDATA[<h2 id="tldr">TL;DR</h2> <p>On May 21, 2024, Gala Games was exploited on the Ethereum Mainnet, which resulted in the excess minting of 5 billion GALA tokens, which were worth approximately $219 million.</p> <h2 id="introduction-to-gala-games">Introduction to Gala Games</h2> <p>Gala Games is a web-based gaming platform that also extends its arm to the music and film industries.</p> <h2 id="vulnerability-assessment">Vulnerability Assessment</h2> <p>The root cause of the exploit remains unknown or uncertain. Was it a private key compromise, a case of <a href="https://x.com/Benefactor0101/status/1792698768166715776">private key misuse by an insider</a>, or perhaps even team involvement given the shady nature of some DeFi projects? This is all unclear.</p> <h3 id="incident-analysis">Incident Analysis</h3> <p>We attempt to analyze <a href="https://etherscan.io/tx/0xa6d90abe17d17743a9cecab84bcefb0fd0bbfa0c61bba60fd2f680b0a2f077fe">the attack transaction</a> executed by <a href="https://etherscan.io/address/0xe2ca471124b124831e231fb835778840ad100f97">the exploiter</a>.</p> <p>The minting of this massive number of tokens can be directly correlated with the compromise of the private keys of the deployer or the administrator wallet.</p> <p>The attacker then took to 0xProject to <a href="https://etherscan.io/advanced-filter?fadd=0xe2ca471124b124831e231fb835778840ad100f97&amp;tadd=%2C0xDef1C0ded9bec7F1a1670819833240f027b25EfF&amp;qt=1">dump these tokens</a> in chunks of 50 and 100 ETH.</p> <p>The exploiter was able to swap 599 million GALA tokens for roughly 5,913.20 ETH, which are worth approximately $21.8 million. At the time of this writing, the <a href="https://debank.com/profile/0xe2Ca471124b124831e231fb835778840Ad100F97">wallet of the exploiter</a> has a holding of approximately $206,737,478 worth of assets.</p> <p>The affected <a href="https://etherscan.io/address/0x8d92a6812b3da2346883f0631910c96cb9c5a5f9#code">Gala contract</a> has a <a href="https://etherscan.io/address/0x8d92a6812b3da2346883f0631910c96cb9c5a5f9#code#F1#L38"><code class="language-plaintext highlighter-rouge">notBlocklisted</code> modifier</a>, allowing the deployer to have privilege access to restrict an address for interacting with the protocol.</p> <pre><code class="language-solidity">modifier notBlocklisted(address _account) {
  require(!blocklisted[_account], "Account is blocklisted");
  _;
}
</code></pre> <p>Two hours and 16 minutes after the exploit, as viewed in <a href="https://etherscan.io/tx/0x15129c219a94e24d40541e622757973c0664338f117ff6c4b68d845854b167b9">this transaction</a>, the deployer has now added the address of the exploiter to the blocklist, effectively reducing the extent of the damage caused by the attack. Therefore, the actual loss of assets suffered by the protocol stands at $21.8 million. The excess of 4,401,236,462 GALA tokens will be burned by the team.</p> <h2 id="aftermath">Aftermath</h2> <p>The <a href="https://x.com/GoGalaGames/status/1792727587460104377">team acknowledged</a> the occurrence of the exploit and stated that the incident has been contained and the impacted wallet has been frozen. The exploit was an isolated incident, the cause of which has already been addressed, and the team is not closely working with law enforcement agencies to investigate the individuals behind the breach.</p> <p>Eric Schiermeyer, the CEO of Gala Games, took to X (formerly Twitter) to <a href="https://x.com/Benefactor0101/status/1792698768166715776">highlight the details</a> surrounding the incident. According to him, the Gala contract on the Ethereum Mainnet is guarded by a multisignature wallet, which was never compromised. This incident was the result of a loosely coupled internal control within the team.</p> <h2 id="solution">Solution</h2> <p>In response to the Gala Games exploit, it is imperative to address the underlying vulnerabilities and implement robust security measures to prevent future incidents. The exploit highlights the critical importance of safeguarding private keys, as their compromise can result in severe financial losses. Implementing secure storage solutions is paramount, with hardware wallets being a recommended option for cold storage. These wallets keep the majority of assets offline, reducing exposure to online threats. For operational liquidity, a minimal amount of assets should be kept in hot wallets, protected by stringent security protocols.</p> <p>Multi-signature wallets provide an additional layer of security by requiring multiple parties to authorize transactions. This significantly mitigates the risk of unauthorized access due to compromised keys. Regular security audits and vulnerability assessments are essential to identify potential security gaps and ensure that private key management protocols remain secure and up-to-date.</p> <p>The Gala Games team must also focus on continuous education and vigilance against phishing, social engineering, and malware threats. Regular security training for team members on the latest threats and secure communication practices can substantially reduce the risk of such attacks. Keeping software, including wallets and security tools, updated is crucial for defending against known vulnerabilities.</p> <p>Despite the existence of blacklist functionality in the Gala Games protocol, the team took over two hours to restrict the attacker’s access, by which time significant damage had already been done, resulting in losses of over $21 million. However, this functionality did help prevent a larger scale of damage. To enhance the protocol’s response time, the team should implement automated monitoring and alert systems to detect and respond to suspicious activities more swiftly.</p> <p><em>This article was <a href="https://medium.com/p/1884b5d4e5b6">originally published</a> by Pukar Acharya for Neptune Mutual.</em></p>]]></content><author><name></name></author><category term="blockchain-hacks"/><category term="private-key-compromise"/><category term="gala-games"/><summary type="html"><![CDATA[Learn how Gala Games was exploited, resulting in a loss of assets worth $219 million.]]></summary></entry><entry><title type="html">Analysis of the Tsuru Exploit</title><link href="https://iampukar.github.io/blog/2024/tsuru-exploit/" rel="alternate" type="text/html" title="Analysis of the Tsuru Exploit"/><published>2024-05-13T11:46:00+00:00</published><updated>2024-05-13T11:46:00+00:00</updated><id>https://iampukar.github.io/blog/2024/tsuru-exploit</id><content type="html" xml:base="https://iampukar.github.io/blog/2024/tsuru-exploit/"><![CDATA[<h2 id="tldr">TL;DR</h2> <p>On May 10, 2024, Tsuru was exploited on the Base chain due to a smart contract vulnerability, which resulted in a loss of 137.78 ETH, which was worth approximately $410,000.</p> <h2 id="introduction-to-tsuru">Introduction to Tsuru</h2> <p>Tsuru is the original character created by a supposed Japanese illustrator, Tsurushima Tatsumi.</p> <h2 id="vulnerability-assessment">Vulnerability Assessment</h2> <p>The root cause of the exploit is a lack of regulated access control.</p> <h3 id="steps">Steps</h3> <p><strong>Step 1:</strong></p> <p>We attempt to analyse <a href="https://app.blocksec.com/explorer/tx/base/0xe63a8df8759f41937432cd34c590d85af61b3343cf438796c6ed2c8f5b906f62">the attack transaction</a> executed by <a href="https://basescan.org/address/0x7a5eb99c993f4c075c222f9327abc7426cfae386">the exploiter</a>.</p> <p><strong>Step 2:</strong></p> <p>The exploited <a href="https://basescan.org/address/0x75ac62ea5d058a7f88f0c3a5f8f73195277c93da#code">TSURUWrapper contract</a> had a vulnerable <a href="https://basescan.org/address/0x75ac62ea5d058a7f88f0c3a5f8f73195277c93da#code#L1848">onERC1155Received function</a> that lacked proper authentication and enough access control.</p> <pre><code class="language-solidity">function onERC1155Received(address, address from, uint256 id, uint256 amount, bytes calldata) external override nonReentrant returns (bytes4) {
  require(id == tokenID, "Token ID does not match");

  if (msg.sender == address(erc1155Contract)) {
    return this.onERC1155Received.selector;
  }

  _safeMint(from, amount * ERC1155_RATIO); // Adjust minting based on the ERC1155_RATIO
  return this.onERC1155Received.selector;
}
</code></pre> <p><strong>Step 3:</strong></p> <p>As long as the id or tokenID parameter in this function corresponds to the ID of the project, it would allow anyone to mint the TSURU token and later swap it for ETH in the Uniswap Liquidity pool.</p> <p><strong>Step 4:</strong></p> <p>This exploiter on the Base chain <a href="https://basescan.org/tx/0xfe091a2d175f488bd366d3a84e9c37a622d789bf4539defacfc5f2a08169e2ca">swapped</a> the <a href="https://basescan.org/tx/0x1f51bdcc52a44e81360597aeb77050c5049df202692a7121e352fdf7bde6283d">stolen 167 million Tsuru</a> for 137.78 ETH, which were worth approximately $410,000, and <a href="https://www.basescan.org/tx/0x1f51bdcc52a44e81360597aeb77050c5049df202692a7121e352fdf7bde6283d">then bridged</a> it to <a href="https://etherscan.io/address/0x5E209c84E8632c011B7B5209dda3f7e50409C446">this address</a> on the Ethereum Mainnet. This address on the Ethereum Mainnet also <a href="https://etherscan.io/tx/0x1a02f2843c45bed3e3c126e0778346a4d30b4e958ebed31d2e463a9be6558e05">received 40.95 ETH</a> worth of assets from <a href="https://twitter.com/PerpyFinance/status/1787385427403395562">an old incident</a> that traces back to the incident involving <a href="https://twitter.com/MetaSleuth/status/1788966866511438268">Perpy Finance</a>.</p> <p><strong>Step 5:</strong></p> <p>The project was hacked <a href="https://basescan.org/tx/0x0812740dc17439c08876ab94926404f4b13d0457d4f17ef355ba8ad02c18f8c0">roughly two hours</a> after its deployment, and at the time of this writing, the <a href="https://debank.com/profile/0x5e209c84e8632c011b7b5209dda3f7e50409c446">address of the exploiter on the Ethereum Mainnet</a> has a hold of 179.68 ETH, which is worth approximately $516,129.</p> <h2 id="aftermath">Aftermath</h2> <p>The <a href="https://twitter.com/TsuruBase/status/1788941543514223046">team acknowledged</a> the occurrence of the exploit and has also shared a detailed post-mortem report regarding the incident.</p> <h2 id="solution">Solution</h2> <p>To address the vulnerabilities exploited in the Tsuru smart contract, a multi-faceted approach focused on strengthening security protocols, improving contract design, and enhancing monitoring systems is essential. Firstly, introducing rigorous access control measures in smart contracts is critical. For the Tsuru case, specifically ensuring that the <code class="language-plaintext highlighter-rouge">onERC1155Received</code> function includes authentication checks to verify not only the contract addresses interacting but also the roles of the interacting accounts would prevent unauthorized access. This could be implemented by incorporating a modifier that checks if the caller is from a list of addresses pre-approved by the contract owner or holds a specific role defined within the contract’s governance framework.</p> <p>Additionally, enhancing the contract’s logic to handle unexpected inputs more safely is necessary. For instance, implementing checks that validate the state changes within the contract before and after executing critical functions could help. This ensures that even if an unauthorized party were to call a function, they would not be able to cause state changes that could lead to asset theft or other undesired outcomes.</p> <p>Improving the testing and deployment procedures is another crucial step. Before deployment, the contract should undergo thorough testing, including both automated tests and manual peer reviews. Utilizing testnets to simulate real-world usage and attacks can help uncover vulnerabilities that might not be evident in isolated tests. Furthermore, engaging external auditors to conduct security audits and offering bug bounty programs can incentivize the discovery and resolution of security flaws before they can be exploited maliciously.</p> <p><em>This article was <a href="https://medium.com/p/630816199ff4">originally published</a> by Pukar Acharya elsewhere.</em></p>]]></content><author><name></name></author><category term="blockchain-hacks"/><category term="access-control"/><category term="tsuru"/><summary type="html"><![CDATA[Learn how Tsuru was exploited, resulting in a loss of 137.78 ETH which is worth $410,000.]]></summary></entry><entry><title type="html">How Was Galaxy Fox Token Exploited?</title><link href="https://iampukar.github.io/blog/2024/galaxy-fox-token-exploit/" rel="alternate" type="text/html" title="How Was Galaxy Fox Token Exploited?"/><published>2024-05-11T11:46:00+00:00</published><updated>2024-05-11T11:46:00+00:00</updated><id>https://iampukar.github.io/blog/2024/galaxy-fox-token-exploit</id><content type="html" xml:base="https://iampukar.github.io/blog/2024/galaxy-fox-token-exploit/"><![CDATA[<h2 id="tldr">TL;DR</h2> <p>On May 10, 2024, the Galaxy Fox token was exploited on the Ethereum Mainnet due to a smart contract vulnerability, which resulted in a loss of over 108 ETH, worth approximately $330,000.</p> <h2 id="introduction-to-galaxy-fox">Introduction to Galaxy Fox</h2> <p>Galaxy Fox is a web3 platform that features their native token, captivating NFTs, a staking platform, and thrilling play-to-earn gaming ecosystem.</p> <h2 id="vulnerability-assessment">Vulnerability Assessment</h2> <p>The root cause of the exploit is a lack of regulated access control.</p> <h3 id="steps">Steps</h3> <p><strong>Step 1:</strong></p> <p>We attempt to analyse <a href="https://etherscan.io/tx/0x12fe79f1de8aed0ba947cec4dce5d33368d649903cb45a5d3e915cc459e751fc">the attack transaction</a> executed by <a href="https://etherscan.io/address/0xfce19f8f823759b5867ef9a5055a376f20c5e454">the exploiter</a>.</p> <p><strong>Step 2:</strong></p> <p>The <a href="https://etherscan.io/address/0x11a4a5733237082a6c08772927ce0a2b5f8a86b6">vulnerable and exploited contract</a> was unverified, so we attempted <a href="https://app.dedaub.com/ethereum/address/0x11a4a5733237082a6c08772927ce0a2b5f8a86b6/decompiled">to decompile it</a>. The setMerkleRoot function was set to a public visibility access specifier and lacked enough access control to allow anyone to change the merkel roots.</p> <pre><code class="language-solidity">function setMerkleRoot(bytes32 _merkleRoot) public payable {
  require(msg.data.length - 4 &gt;= 32);
  _merkleRoot = _merkleRoot;
}
</code></pre> <p><strong>Step 3:</strong></p> <p>This allowed them to invoke a call to the claim function to falsely claim and withdraw 108 ETH worth of funds from the contract.</p> <pre><code class="language-solidity">function claim(address to, uint256 amount, bytes32[] proof) public payable {
  require(msg.data.length - 4 &gt;= 96);
  require(proof &lt;= uint64.max);
  require(4 + proof + 31 &lt; msg.data.length);
  require(proof.length &lt;= uint64.max);
  require(4 + proof + (proof.length &lt;&lt; 5) + 32 &lt;= msg.data.length);
  require(_claimStart &gt; 0, Error("GfoxClaim: Not started"));
  require(block.timestamp &gt;= _claimStart, Error("GfoxClaim: Not started"));
  require(amount &gt; _claimedAmount[to], Error("GfoxClaim: Already claimed"));
  v0 = new uint256[](proof.length);
  CALLDATACOPY(v0.data, proof.data, proof.length &lt;&lt; 5);
  v0[proof.length] = 0;
  v1 = v2 = keccak256(bytes20(to &lt;&lt; 96), amount);
  v3 = v4 = 0;
  while (v3 &lt; v0.length) {
    require(v3 &lt; v0.length, Panic(50)); // access an out-of-bounds or negative index of bytesN array or slice
    v1 = v5 = 0x9c0(v0[v3], v1);
    v3 += 1;
  }
  require(v1 == _merkleRoot, Error("GfoxClaim: Invalid proof"));
  v6 = 0x718(amount);
  v7 = _SafeSub(v6, _claimedAmount[to]);
  v8 = _SafeAdd(_claimedAmount[to], v7);
  _claimedAmount[to] = v8;
  emit Claimed(to, v7, amount);
  0x7d1(v7, to, address(0x8f1cece048cade6b8a05dfa2f90ee4025f4f2662));
}
</code></pre> <p>The flashbot private transactions sent by the <a href="https://etherscan.io/address/0x000000000004c825e42d37eed998ab91bbad7883">actual attacker</a> were <a href="https://etherscan.io/tx/0x605ec9f8e739450bdc84240c975c119570581fc368cf4302c8f8e5646ffe9454">front-run</a> by the <a href="https://etherscan.io/address/0xfce19f8f823759b5867ef9a5055a376f20c5e454">original attacker</a>, who was able to steal the assets.</p> <p><strong>Step 4:</strong></p> <p>The <a href="https://etherscan.io/address/0xfce19f8f823759b5867ef9a5055a376f20c5e454">original attacker</a> was followed by yet another <a href="https://etherscan.io/address/0x14b362d2e38250604f21a334d71c13e2ed478467">copycat attacker</a>, who was also able to successfully execute the said attack to take away the remaining funds. The original attacker <a href="https://etherscan.io/tx/0x5d6b4319f8f9bb080a44131ac34101d3989602de9d8f111c57ab393780f94c1f">approved 99.79 ETH</a> or $289,221 for his trade and has a hold of 9.03 ETH at <a href="https://debank.com/profile/0xfce19f8f823759b5867ef9a5055a376f20c5e454/stream">this address</a>, which is worth roughly $26,167.</p> <p><strong>Step 5:</strong></p> <p>The <a href="https://etherscan.io/address/0x14b362d2e38250604f21a334d71c13e2ed478467">copycat attacker</a> took away approximately <a href="https://app.blocksec.com/explorer/tx/eth/0x6a3d91fbd0a865a56c4efa7c540f28adcf7b569df44c9d50e1f86ab51b177405">27.8 million GFOX tokens</a> and <a href="https://etherscan.io/tx/0xfbccd51ed0e51e8f0e9b36396d62dc7e003230972bb9fed6872c5d1bcdf0a958">swapped them</a> for 2.32 ETH, which were worth roughly $7029. As of this writing, the <a href="https://debank.com/profile/0x14B362d2E38250604F21A334D71C13E2eD478467">wallet of the copycat attacker</a> has a hold of 2.17 ETH, which is approximately $6,294. This attacker has also already laundered 2 ETH, amounting to roughly $5,800 to Tornado Cash, as seen in <a href="https://etherscan.io/tx/0xade6c3f983a72bef30cb5fbf15de4faf046873339b3f07456a05074b036fba75">these</a> and <a href="https://etherscan.io/tx/0x3e35fe8caf95ef7afb66212005758246f1ebb17e8fa6a3031417913a519f3d80">other</a> transactions.</p> <h2 id="solution">Solution</h2> <p>To address the vulnerability exploited in the Galaxy Fox token incident, a comprehensive revision of the smart contract’s access control mechanisms is essential. The primary flaw was the public accessibility of the setMerkleRoot function, which should have been restricted to only authorized addresses. Implementing proper access control can be effectively achieved by utilizing modifiers in the Solidity programming language.</p> <p>One effective solution is to introduce a modifier that checks whether the message sender, or <code class="language-plaintext highlighter-rouge">msg.sender</code>, is an authorized user. This can be done by maintaining a list of authorized addresses of the owner in a mapping. The owner could be a state variable set to the deployer’s address, or alternatively, it could be a role-based system where multiple addresses are authorized to perform certain actions. This modifier is then applied to the <code class="language-plaintext highlighter-rouge">setMerkleRoot</code> function, ensuring that only an authorized user can execute it.</p> <p>Beyond simple owner-based controls, a more robust and flexible access control system can be implemented using role-based access control (RBAC). This system can manage different levels of permissions for different types of actions within the contract. The OpenZeppelin library provides well-tested contracts for such purposes, including AccessControl, which allows for multiple roles to be created and managed. Each role can be assigned specific permissions, and multiple accounts can be granted or revoked roles dynamically.</p> <p>Implementing these changes would significantly enhance the security of the contract by restricting critical functionalities to only those addresses that are explicitly authorized. Moreover, it is crucial to undergo thorough audits and extensive testing on testnets before deploying the contract on the mainnet. These audits should be conducted by independent security experts to ensure that no vulnerabilities remain.</p> <p><em>This article was <a href="https://medium.com/p/c0860520cdc2">originally published</a> by Pukar Acharya elsewhere.</em></p>]]></content><author><name></name></author><category term="blockchain-hacks"/><category term="access-control"/><category term="galaxy-fox-token"/><summary type="html"><![CDATA[Learn how Galaxy Fox Token was exploited, resulting in a loss of assets worth $330,000.]]></summary></entry><entry><title type="html">How Was NGFS Token Exploited?</title><link href="https://iampukar.github.io/blog/2024/ngfs-token-exploit/" rel="alternate" type="text/html" title="How Was NGFS Token Exploited?"/><published>2024-05-02T11:46:00+00:00</published><updated>2024-05-02T11:46:00+00:00</updated><id>https://iampukar.github.io/blog/2024/ngfs-token-exploit</id><content type="html" xml:base="https://iampukar.github.io/blog/2024/ngfs-token-exploit/"><![CDATA[<h2 id="tldr">TL;DR</h2> <p>On April 25, 2024, FENGSHOU or the NGFS token, was exploited on the BNB chain due to a smart contract vulnerability, which resulted in a loss of assets worth approximately $191,000.</p> <h2 id="introduction-to-ngfs-token">Introduction to NGFS Token</h2> <p>FENGSHOU or NGFS is a token on the BNB chain.</p> <h2 id="vulnerability-assessment">Vulnerability Assessment</h2> <p>The root cause of the exploit is a lack of stringent access control.</p> <h3 id="steps">Steps</h3> <p><strong>Step 1:</strong></p> <p>We attempt to analyze the <a href="https://bscscan.com/tx/0x8ff764dde572928c353716358e271638fa05af54be69f043df72ad9ad054de25">attack transaction</a> executed by <a href="https://bscscan.com/address/0xd03d360dfc1dac7935e114d564a088077e6754a0">the exploiter</a>.</p> <p><strong>Step 2:</strong></p> <p>It can be seen on the <a href="https://bscscan.com/address/0xa608985f5b40cdf6862bec775207f84280a91e3a">vulnerable NGFSToken contract</a> that the delegateCallReserves function was set to a public visibility specifier and lacked proper access control, allowing for an arbitrary configuration of the _uniswapV2Proxy variable.</p> <pre><code class="language-solidity">function delegateCallReserves() public {
  require(!uniswapV2Dele, "ERC20: delegateCall launch");

  _uniswapV2Proxy = _msgSender();
  uniswapV2Dele = !uniswapV2Dele;
}
</code></pre> <p><strong>Step 3:</strong></p> <p>With this privilege in hand, the attacker was able to set the <a href="https://bscscan.com/address/0xc73781107d086754314f7720ca14ab8c5ad035e4">attack contract</a> as a UniSwapV2 proxy via invoking a call to the setProxySync function. Notably, the attack was carried out roughly 1.5 hours after the deployment of the NGFS token contract.</p> <pre><code class="language-solidity">function setProxySync(address _addr) external {
  require(_addr != ZERO, "ERC20: library to the zero address");
  require(_addr != DEAD, "ERC20: library to the dead address");
  require(msg.sender == _uniswapV2Proxy, "ERC20: uniswapPrivileges");

  _uniswapV2Library = IPancakeLibrary(_addr);
  _isExcludedFromFee[_addr] = true;
}
</code></pre> <p><strong>Step 4:</strong></p> <p>As a result, the attacker is able to manipulate the _uniswapV2Library variable to set an arbitrary high balance for their attack contract by invoking a call to the reserveMultiSync function, and then swap tokens for the underlying tokens.</p> <pre><code class="language-solidity">function reserveMultiSync(address syncAddr, uint256 syncAmount) public {
  require(_msgSender() == address(_uniswapV2Library), "ERC20: uniswapPrivileges");
  require(syncAddr != address(0), "ERC20: multiSync address is zero");
  require(syncAmount &gt; 0, "ERC20: multiSync amount equal to zero");
  _balances[syncAddr] = _balances[syncAddr].air(syncAmount);
  _isExcludedFromFee[syncAddr] = true;
}
</code></pre> <h2 id="solution">Solution</h2> <p>To prevent the exploit seen in the NGFS token incident, several robust security measures can be implemented to safeguard smart contracts against unauthorized access and manipulation. If the Uniswap proxy variables are intended to be set once and not modified, they should be configured in the contract’s constructor and declared as immutable. This design pattern ensures that the value is written only once during contract creation and cannot be altered thereafter, providing a high level of security against unauthorized changes.</p> <p>Integrating access control mechanisms is also crucial. The use of an onlyOwner modifier, or similar access control modifiers, should be applied to sensitive functions to ensure that only authorized addresses can execute them. This can be managed through OpenZeppelin’s Ownable contract, which provides a robust ownership control mechanism. These modifiers ensure that only the designated owner of the contract can call critical functions, thereby preventing unauthorized users from reassigning critical components like the UniSwapV2 proxy.</p> <p>Furthermore, conducting comprehensive security audits and thorough testing regimes, including both static analysis and dynamic testing, is essential to identifying vulnerabilities before deployment. Utilizing automated tools along with expert manual review will help uncover issues that might be overlooked by one approach alone. Additionally, increasing the rigor of validation checks within functions that handle critical logic is advisable.</p> <p><em>This article was <a href="https://medium.com/p/784674488d8a">originally published</a> by Pukar Acharya elsewhere.</em></p>]]></content><author><name></name></author><category term="blockchain-hacks"/><category term="access-control"/><category term="ngfs-token"/><summary type="html"><![CDATA[Learn how NGFS Token was exploited, resulting in a loss of assets worth approximately $191,000.]]></summary></entry><entry><title type="html">How Was Sumer Money Exploited?</title><link href="https://iampukar.github.io/blog/2024/sumer-money-exploit/" rel="alternate" type="text/html" title="How Was Sumer Money Exploited?"/><published>2024-04-15T11:46:00+00:00</published><updated>2024-04-15T11:46:00+00:00</updated><id>https://iampukar.github.io/blog/2024/sumer-money-exploit</id><content type="html" xml:base="https://iampukar.github.io/blog/2024/sumer-money-exploit/"><![CDATA[<h2 id="tldr">TL;DR</h2> <p>On April 12, 2024, Sumer Money was exploited on the Base chain due to a smart contract vulnerability, which resulted in a loss of assets worth approximately $310,000.</p> <h2 id="introduction-to-sumer">Introduction to Sumer</h2> <p>Sumer is a cross-chain synthetic asset protocol with a lending and borrowing market deployed simultaneously on major chains.</p> <h2 id="vulnerability-assessment">Vulnerability Assessment</h2> <p>The root cause of the exploit is a lack of reentrancy protection, which led to the manipulation of the underlying assets.</p> <h3 id="steps">Steps</h3> <p><strong>Step 1:</strong></p> <p>We attempt to analyze <a href="https://basescan.org/tx/0x619c44af9fedb8f5feea2dcae1da94b6d7e5e0e7f4f4a99352b6c4f5e43a4661">the attack transaction</a> executed by <a href="https://basescan.org/address/0xbb344544ad328b5492397e967fe81737855e7e77">the exploiter</a>.</p> <p><strong>Step 2:</strong></p> <p>The exploiter initially took a flash loan of a substantial amount of assets from Balancer Vault, including 150 WETH and 645,000 USDC.</p> <p><strong>Step 3:</strong></p> <p>Using the borrowed assets, the attacker first interacted with sdrETH and then with sdrUSDC markets to mint the associated tokens. At this point of time, the exchange rate between ETH and sdrETH tokens was 1:1.</p> <p><strong>Step 4:</strong></p> <p>In the <a href="https://basescan.org/address/0x23811c17bac40500decd5fb92d4feb972ae1e607#code">vulnerable contract</a>, the <a href="https://basescan.org/address/0x23811c17bac40500decd5fb92d4feb972ae1e607#code#F5#L106">repayBorrowBehalf function</a> allows external callers to repay a loan on behalf of another borrower. Within this function, if the received ETH amount is greater than the borrowed balance, the excess ETH is sent back to the sender using a low-level call with an empty data payload.</p> <pre><code class="language-solidity">function repayBorrowBehalf(address borrower) external payable {
  uint256 received = msg.value;
  uint256 borrows = CEther(payable(this)).borrowBalanceCurrent(borrower);
  if (received &gt; borrows) {
    // payable(msg.sender).transfer(received - borrows);
    (bool success, ) = msg.sender.call{value: received - borrows}("");
    require(success, "Address: unable to send value, recipient may have reverted");
  }
  (uint256 err, ) = repayBorrowBehalfInternal(borrower, borrows);
  requireNoError(err, "repayBorrowBehalf failed");
}
</code></pre> <p><strong>Step 5:</strong></p> <p>The attacker then manipulates the exchange rate and the internal state of the contract by borrowing against all of the assets held in the contract. A reentrancy call was triggered by repaying a very small amount of underlying assets, allowing the attacker to manipulate the state mid-transaction.</p> <p><strong>Step 6:</strong></p> <p>Due to a stale and incorrectly updated exchange rate, the attacker was able to redeem all tokens. The borrowed flash loan was repaid, and they were able to retain approximately $310,930 worth of assets.</p> <h2 id="aftermath">Aftermath</h2> <p>The team has yet to make an official announcement regarding the occurrence of the incident. At the time of this writing, all of the stolen assets are held at <a href="https://debank.com/profile/0xbB344544Ad328b5492397E967Fe81737855e7e77">this address</a>, likely controlled by the hacker.</p> <h2 id="solution">Solution</h2> <p>To protect smart contracts against vulnerabilities such as those exploited in the case of Sumer Money, several comprehensive strategies can be deployed. One effective method to prevent reentrancy attacks involves the implementation of reentrancy guards. A mutual exclusion lock, or mutex, can be integrated into functions that make external calls, ensuring that these functions are not re-enterable while they’re still in execution. This simple boolean lock/unlock mechanism is crucial in maintaining state consistency throughout the transaction’s lifecycle.</p> <p>Adhering to the checks-effects-interactions pattern is another critical security practice. Functions should be structured so that all validations are performed first (checks), followed by state modifications (effects), and only then should interactions with external contracts occur. This sequence minimizes the risk of state changes being exploited through reentrant calls.</p> <p>Accurate and timely updates of critical financial information, such as balances and exchange rates, are essential. These updates should be handled atomically and secured within the transaction flow to ensure that they reflect the actual system state before any external interactions take place.</p> <p>Testing and simulations form the backbone of a robust security framework. Utilizing the available development frameworks like Hardhat enables developers to write comprehensive tests that cover various attack vectors, including reentrancy. Fuzzing, a technique used to test contracts under extreme conditions, and formal verification, a process that mathematically proves contract correctness under specific conditions, should also be employed to ensure contract resilience.</p> <p><em>This article was <a href="https://medium.com/p/2c114ebffaa8">originally published</a> by Pukar Acharya elsewhere.</em></p>]]></content><author><name></name></author><category term="blockchain-hacks"/><category term="reentrancy"/><category term="sumer-money"/><summary type="html"><![CDATA[Learn how Sumer Money was exploited, resulting in a loss of assets worth $310,000.]]></summary></entry><entry><title type="html">Analysis of the Miner Exploit</title><link href="https://iampukar.github.io/blog/2024/miner-exploit/" rel="alternate" type="text/html" title="Analysis of the Miner Exploit"/><published>2024-02-16T11:46:00+00:00</published><updated>2024-02-16T11:46:00+00:00</updated><id>https://iampukar.github.io/blog/2024/miner-exploit</id><content type="html" xml:base="https://iampukar.github.io/blog/2024/miner-exploit/"><![CDATA[<h2 id="tldr">TL;DR</h2> <p>On February 14, 2024, Miner was exploited on the Ethereum Mainnet due to a smart contract vulnerability, which resulted in a loss of 168.8 ETH, worth approximately $466,000.</p> <h2 id="introduction-to-miner">Introduction to Miner</h2> <p>MINER is a collection of 100,000 avatars tied to the first tokens built on ERC-X, a fully optimized, experimental standard that enables the use of multiple token standards.</p> <h2 id="vulnerability-assessment">Vulnerability Assessment</h2> <p>The root cause of the exploit is a double-transfer vulnerability caused by a lack of input validation.</p> <h3 id="steps">Steps</h3> <p><strong>Step 1:</strong></p> <p>We attempt to analyze <a href="https://phalcon.blocksec.com/explorer/tx/eth/0x5cc93e9d5adec2b432ddf8052ed77a052e07671db36954675d6f55df28bdb8c0">one of the attack transactions</a> executed by <a href="https://etherscan.io/address/0xbff51c9c3d50d6168dfef72133f5dbda453ebf29">the exploiter</a>.</p> <p><strong>Step 2:</strong></p> <p>The <a href="https://etherscan.io/address/0xe77ec1bf3a5c95bfe3be7bdbacfe3ac1c7e454cd#code">affected and vulnerable contract</a> had set its transfer functionality in such a way that it would only check to validate non-zero sender and receiver addresses without preventing the same address from being both sender and receiver.</p> <pre><code class="language-solidity">function _transfer(address from, address to, uint256 value, bool mint) internal {
  if (from == address(0)) {
    revert ERC20InvalidSender(address(0));
  }
  if (to == address(0)) {
    revert ERC20InvalidReceiver(address(0));
  }
  _update(from, to, value, mint);
}
</code></pre> <p><strong>Step 3:</strong></p> <p>The transfer function would then invoke a call to the update function, which would permit the self-transfer of the tokens. Meaning anyone could effectively double their holdings by transferring the tokens to themselves.</p> <pre><code class="language-solidity">function _update(address from, address to, uint256 value, bool mint) internal virtual {
  uint256 fromBalance = _balances[from];
  uint256 toBalance = _balances[to];
  if (fromBalance &lt; value) {
    revert ERC20InsufficientBalance(from, fromBalance, value);
  }

  unchecked {
    // Overflow not possible: value &lt;= fromBalance &lt;= totalSupply.
    _balances[from] = fromBalance - value;

    // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.
    _balances[to] = toBalance + value;
  }

  emit Transfer(from, to, value);

  if (mint) {
    // Skip burn for certain addresses to save gas
    bool wlf = whitelist[from];
    if (!wlf) {
      uint256 tokens_to_burn = (fromBalance / tokensPerNFT) - ((fromBalance - value) / tokensPerNFT);
      if (tokens_to_burn &gt; 0) _burnBatch(from, tokens_to_burn);
    }

    // Skip minting for certain addresses to save gas
    if (!whitelist[to]) {
      if (easyLaunch == 1 &amp;&amp; wlf &amp;&amp; from == owner()) {
        //auto-initialize first (assumed) LP
        whitelist[to] = true;
        easyLaunch = 2;
      } else {
        uint256 tokens_to_mint = ((toBalance + value) / tokensPerNFT) - (toBalance / tokensPerNFT);
        if (tokens_to_mint &gt; 0) _mintWithoutCheck(to, tokens_to_mint);
      }
    }
  }
}
</code></pre> <p><strong>Step 4:</strong></p> <p>In this function, the <code class="language-plaintext highlighter-rouge">_balances[from]</code> parameter calculates the sender’s balance minus the tokens sent but is then immediately overwritten by the cached <code class="language-plaintext highlighter-rouge">_balances[to]</code> parameter, which adds the sent value to the sender’s balance, effectively <a href="https://twitter.com/CertiKAlert/status/1757798087500628054">doubling their holdings</a>.</p> <h2 id="aftermath">Aftermath</h2> <p>The <a href="https://twitter.com/minerercx/status/1757773942285054085">team acknowledged</a> the occurrence of the exploit and urged users to refrain from buying the MINER tokens. According to them, they have saved roughly 130 ETH worth of liquidity. The team will likely redeploy a new contract or continue with the existing one if a fix can be initiated without redeploying.</p> <p>They have also sent an <a href="https://etherscan.io/tx/0x27a01149b321eaab0b16d488aefaffa04517a5cf73397b1bbcb8192a4db692ae">on-chain message</a> to the hacker offering a bounty of $120,000, equivalent to 30% of the exploited funds, with hopes of recovering the stolen assets.</p> <p><a href="https://twitter.com/minerercx/status/1757808891155329028">Reportedly</a>, one of their team members tried to blacklist the hacker but instead ended up whitelisting them first and then blacklisting them. The exploiter was quick to redeploy another contract to carry on exploiting. The social media channels of the protocol on X (formerly Twitter) list their creation date as February 2024. The underlying token of the exploited protocol was only <a href="https://twitter.com/minerercx/status/1757641184925688061">launched three days</a> prior to this exploit.</p> <h2 id="solution">Solution</h2> <p>In addressing the recent exploit of the Miner, it’s crucial to reflect on the comprehensive measures that can be adopted to mitigate such vulnerabilities in the future and ensure a more robust security framework for smart contracts. A pivotal aspect that came to light was the engagement of an audit firm that, despite its efforts, overlooked some common bugs. This highlights the essential need for thorough and rigorous auditing processes. Choosing well-established and reputable audit companies with a proven track record of identifying vulnerabilities in smart contracts is paramount. However, the responsibility does not solely lie with the audit firms; smart contract developers should engage multiple auditors to cross-verify the security of their code. This multi-layered approach to auditing can significantly reduce the risk of overlooking critical vulnerabilities.</p> <p>The incident also underscores the inherent risks associated with newly launched protocols and tokens. The Miner protocol, having been created recently with its token deployed merely days before the exploit, serves as a stark reminder of the volatility and uncertainty surrounding new projects. Investors should exercise caution and conduct extensive research before investing in newly minted assets. A critical evaluation of the project’s development team, audit reports, and security practices can provide valuable insights into its credibility and stability.</p> <p>To mitigate and prevent such issues, adopting best practices in smart contract development is crucial. Ensuring rigorous input validation, implementing secure coding standards, and avoiding common pitfalls such as the double-transfer vulnerability are fundamental steps.</p> <p>The exploit could have been prevented by adhering to a more comprehensive security protocol that includes formal verification. Formal verification is a mathematical approach to verifying the correctness of algorithms underlying a smart contract, ensuring that it behaves as intended under all possible conditions. This method, alongside traditional auditing, can provide a more solid foundation for smart contract security by identifying logical errors and vulnerabilities that might be missed during manual code review.</p> <p><em>This article was <a href="https://medium.com/p/cf4dccd48f11">originally published</a> by Pukar Acharya elsewhere.</em></p>]]></content><author><name></name></author><category term="blockchain-hacks"/><category term="smart-contract-vulnerability"/><category term="miner"/><summary type="html"><![CDATA[Learn how Miner was exploited, which resulted in a loss of assets worth 168.8 ETH.]]></summary></entry><entry><title type="html">A Comprehensive Guide To Supply Chain Attacks In The Web3 World</title><link href="https://iampukar.github.io/blog/2023/supply-chain-attack/" rel="alternate" type="text/html" title="A Comprehensive Guide To Supply Chain Attacks In The Web3 World"/><published>2023-09-23T11:46:00+00:00</published><updated>2023-09-23T11:46:00+00:00</updated><id>https://iampukar.github.io/blog/2023/supply-chain-attack</id><content type="html" xml:base="https://iampukar.github.io/blog/2023/supply-chain-attack/"><![CDATA[<h2 id="introduction-to-supply-chain-attacks">Introduction to Supply Chain Attacks</h2> <p>In the ever-evolving landscape of cybersecurity threats, one perilous adversary looms large: the supply chain attack. This covert cyberattack has gained prominence as a potent weapon for malicious actors seeking to breach organizations of all sizes. In this article, let’s delve deep into the world of supply chain attacks, examining their inner workings, identifying vulnerabilities, and scrutinizing their real-world consequences.</p> <p>As the Web3 industry continues to evolve, there is a growing focus on supply chain security from both the industry itself and the global community. In modern software development, reliance on diverse third-party components and external services has made software supply chains increasingly intricate and expansive. This complexity presents malicious actors with more opportunities to manipulate and infiltrate software supply chains, thereby posing significant threats to enterprise and user data and assets.</p> <p>A supply chain attack is a calculated move by cybercriminals to compromise an organization’s software and hardware infrastructure, posing a risk that extends into the Web3 world. They infiltrate various supply chain stages, an intricate network of vendors and dependencies delivering essential components to both software and hardware. These stages encompass development tools, third-party libraries, cloud services, and update processes, presenting opportunities to embed malicious code, gain unauthorized access, or exploit vulnerabilities. This makes supply chain security critical for safeguarding cryptocurrency assets, user data, system functionality, and overall Web3 integrity.</p> <p>Malicious actors excel at identifying and exploiting weaknesses within third-party components or software libraries relied upon by targeted applications. Understanding the gravity of this threat is imperative, as supply chain attacks often remain undetected until they cause catastrophic damage. Such incidents result in financial losses, reputational damage, and sensitive data loss and can empower attackers to infiltrate systems, exfiltrate data, or assume control of critical applications. Recent events show that supply chain attacks in the Web3 world can have very bad effects, such as the theft of digital assets, the disruption of system functionality, the extortion of businesses, and the spread of malware on a large scale.</p> <h2 id="case-study">Case Study</h2> <p><strong>Ankr - Lost approximately $5 million</strong></p> <p>On December 2, 2022, the <a href="https://twitter.com/ankr/status/1598624443642703872">Ankr protocol</a> on the BNB chain suffered a major exploit due to a governance key compromise. This breach enabled an attacker to mint a massive 10 trillion aBNBc tokens and drain the DEX pool, resulting in approximately $5 million in losses. The <a href="https://twitter.com/ankrstaking/status/1605270645864013847">post-mortem report</a> revealed that former Ankr team members orchestrated the breach through a supply chain attack by <a href="https://www.ankr.com/blog/after-action-report-our-findings-from-abnbc-token-exploit/">injecting malicious code packages</a>. These packages had the potential to compromise Ankr’s private keys each time a legitimate project update was executed. This dumping of a massive amount of aBNBc tokens on a decentralized exchange opened the door for another exploit in which Helio Protocol was attacked and profited the attacker by approximately $15.5 million.</p> <p><strong>Python Package web3-essential</strong></p> <p>On January 30, 2023, a zero-day exploit was discovered in the Python package <a href="https://www.fortinet.com/blog/threat-research/supply-chain-attack-by-new-malicious-python-package-web3-essential/">web3-essential</a>, which had been published on January 26, 2023. Notably, the package’s author, Trexon, joined the repository on the same day of publication. In an attempt to avoid suspicion, Trexon provided a brief project description and assigned a unique version number, ‘1.0.4b0’. This package, however, contained malicious code within its installation script. This code downloaded and executed an external binary file during installation. This malicious executable was specifically designed to compromise Discord accounts and web browsers, spreading malware with the intent of stealing sensitive information, including login credentials, passwords, and credit card details.</p> <h2 id="how-supply-chain-attacks-occur">How Supply Chain Attacks Occur</h2> <p>Supply chain attacks, with their multifaceted exploitation of development and distribution processes, demand a deep understanding for effective defense. Malicious actors employ ingenious methods that underscore the importance of robust security measures. Staying ahead of these threats is essential to protecting digital assets and maintaining trust in your organization’s security practices in our rapidly evolving environment.</p> <h3 id="state-sponsored-groups">State Sponsored Groups</h3> <p>Nation-states often engage in supply chain attacks for espionage or cyberwarfare purposes. These well-resourced actors have the means to infiltrate supply chains at multiple levels, compromising the security and integrity of critical systems. Profit-oriented cybercriminal groups prioritize financial gain, exploiting supply chain vulnerabilities for data theft, fraud, and ransomware attacks at various stages.</p> <h3 id="malicious-component-injection-and-counterfeit-projects">Malicious Component Injection and Counterfeit Projects</h3> <p>Attackers introduce hidden malicious code into open-source components like plugins, extensions, and libraries. They also create counterfeit versions of popular projects, deceiving users. Users unknowingly adopt these compromised components and counterfeit projects, resulting in unauthorized access, data breaches, and system manipulation.</p> <h3 id="infiltration-and-trust-exploitation">Infiltration and Trust Exploitation</h3> <p>Trust is the cornerstone of supply chains. In open-source project communities, attackers gradually gain trust by infiltrating and actively participating. They may leverage changes in project administration or request elevated privileges. Once established as trusted members, they introduce vulnerabilities or malicious code, thereby compromising the integrity of supply chains.</p> <h3 id="exploitation-of-third-party-dependencies">Exploitation of Third-Party Dependencies</h3> <p>Organizations depend on third-party vendors, open-source software, and service providers to enhance efficiency and innovation. However, this reliance can introduce vulnerabilities if not properly managed. Attackers often target widely used third-party libraries, inserting malicious code. These tainted libraries are then unknowingly adopted by open source projects, and when users of these projects update their systems, they inadvertently install compromised libraries, creating opportunities for large-scale exploitation.</p> <h3 id="deceptive-tactics-and-misinformation-campaigns">Deceptive Tactics and Misinformation Campaigns</h3> <p>Attackers employ deceptive tactics, including creating counterfeit projects, manipulating documentation, or hijacking user support channels. They use misinformation campaigns like fake reviews and social media promotion to deceive users. This leads to users unknowingly adopting compromised software, resulting in various security risks.</p> <h3 id="organizational-infiltration-and-hiring-exploitation">Organizational Infiltration and Hiring Exploitation</h3> <p>Attackers target organizations closely tied to open source projects. They may apply for jobs, infiltrate, and exploit their positions to introduce vulnerabilities or backdoors into project code. This allows them to compromise the supply chain from within the organization.</p> <h3 id="sabotaging-reputation-and-covert-misconduct">Sabotaging Reputation and Covert Misconduct</h3> <p>Attackers infiltrate project communities and build trust over time. They engage in covert misconduct, such as advocating insecure practices, inserting subtle bugs, or pushing controversial changes. This erodes the project’s reputation, causes users to abandon it, and serves the attacker’s interests.</p> <h2 id="guide-to-mitigating-supply-chain-attack-risks">Guide to Mitigating Supply Chain Attack Risks</h2> <p>Mitigating the risks of supply chain attacks requires proactive measures and a comprehensive security strategy. Here are key steps that organizations can take to prevent these attacks:</p> <h3 id="package-assessment">Package Assessment</h3> <p>To defend against supply chain attacks, it’s advised to delay package updates for 3-6 months, allowing the open source community to spot and fix vulnerabilities. Before updating, review the release notes for security enhancements. Prioritize packages with high download counts: 50,000 weekly for 6-month-old packages and 1 million weekly for those 3 months old. This approach, combining update delays with download metrics, bolsters software security by leveraging both time and widespread user scrutiny.</p> <h3 id="access-control-and-least-privilege">Access Control and Least Privilege</h3> <p>Enforce strict access controls, employing the principle of least privilege to restrict authorized personnel’s access rights. Implement strong access controls by limiting edit access to essential personnel and ensuring multi-factor authentication (MFA) for their accounts. Regularly review and update access permissions, monitoring user activities and access patterns, particularly those with elevated privileges. Utilizing a monitoring system aids in detecting suspicious activities or unauthorized changes, enabling rapid response and threat mitigation.</p> <h3 id="code-audits-and-continuous-monitoring">Code Audits and Continuous Monitoring</h3> <p>Boost your supply chain security by conducting routine code audits on software components and dependencies. Implement continuous monitoring to swiftly detect anomalies or unauthorized changes. Regular security audits and risk assessments are vital for pinpointing vulnerabilities and weaknesses. Proactive issue identification and resolution significantly reduce the risk of supply chain attacks. Maintain a schedule for periodic audits and assessments to ensure the longevity of your robust security measures.</p> <h3 id="vendor-and-supplier-assessment">Vendor and Supplier Assessment</h3> <p>Before integrating third-party libraries or dependencies, scrutinize their security measures and reputation by conducting a comprehensive assessment of their suppliers and other third-party vendors. Evaluate their cybersecurity practices, track records, and commitment to security. Research their history for vulnerabilities and responsiveness to security matters. Verify software package authenticity through digital signatures or trusted package managers before adoption.</p> <h3 id="incident-response-planning">Incident Response Planning</h3> <p>Despite a security-focused approach, vulnerabilities can emerge. Establish a strong incident response plan covering detection, containment, and mitigation of supply chain breaches. This plan plays a crucial role in minimizing damage and expediting recovery during supply chain attacks. Detail team roles, attack identification, containment steps, and system as well as data restoration procedures. Ensure periodic plan updates and testing to maintain its effectiveness.</p> <h3 id="legal-and-regulatory-compliance">Legal and Regulatory Compliance</h3> <p>Stay informed about cybersecurity regulations and compliance requirements relevant to your industry. Ensure that your supply chain practices align with these standards.</p> <h3 id="security-training-and-awareness">Security Training and Awareness</h3> <p>Cultivate cybersecurity awareness among employees and stakeholders through regular training. Educate them about supply chain attack risks and secure practices. Encourage developers to stay updated on security threats and adopt secure coding. Fostering a security-conscious culture reduces vulnerability risks and enhances overall security.</p> <h2 id="tools-and-technology">Tools and Technology</h2> <p>Security personnel leverage tools like <a href="https://snyk.io/blog/snyk-state-of-open-source-security-2023/">Synk</a>, <a href="https://blog.gitguardian.com/itguardian-secrets-detectors-q1-2023-wrap-up/">GitGuardian</a>, and <a href="https://blog.sonatype.com/enhancing-software-supply-chain-security-new-sonatype-product-capabilities">Sonatype</a> for threat intelligence and package scanning. These tools identify issues related to third-party dependencies, helping teams detect and mitigate vulnerabilities efficiently. They play a crucial role in maintaining supply chain security by providing insights into dependency risks.</p> <p>The <a href="https://github.com/advisories">GitHub Advisory Database</a> is also a vital resource, offering a centralized repository of security advisories for software dependencies. It seamlessly integrates with GitHub repositories through services like <a href="https://github.com/dependabot">Dependabot</a>. This integration automates the process of alerting developers when vulnerabilities are detected in project dependencies. Dependabot supports various package managers, ensuring flexibility for different technology stacks.</p> <p>Security and development teams, at times, <a href="https://github.com/iampukar/package-scan">manually construct solutions</a> to monitor packages and dependencies within an organization. This <a href="https://github.com/iampukar/package-scan/blob/main/README.md">tool in reference</a> is tailored to evaluate JavaScript-based package vulnerabilities by referencing the Google advisory database. Organizations can use similar tools to quickly identify and address potential security risks linked to their software dependencies.</p> <p>It performs comprehensive scans of the JavaScript packages, including versions and dependencies used within an organization. It meticulously cross-references these package details with the extensive <a href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm">GitHub advisory database</a>, which houses a wealth of known vulnerabilities. For each package, the tool conducts a risk assessment, indicating the presence and severity of associated vulnerabilities. Based on this assessment, the tool offers actionable recommendations, such as updating packages or implementing supplementary security measures.</p> <p>By employing similar utility tools, organizations can efficiently bolster their supply chain security by automating the process of identifying and mitigating potential risks associated with their software dependencies.</p> <h2 id="conclusion">Conclusion</h2> <p>In an increasingly interconnected and digital world, the risks associated with supply chain attacks have never been more profound. The consequences of a successful supply chain attack can be catastrophic, encompassing financial losses, reputational damage, and the compromise of sensitive data. However, awareness and vigilance can be powerful allies in the fight against this ever-evolving threat. By understanding the mechanics of supply chain attacks, recognizing the actors and conditions that drive them, and implementing proactive security measures, organizations can fortify their defenses.</p> <p>The dangers of supply chain attacks are real, but so are the solutions. In a world where innovation and efficiency often rely on a complex web of dependencies, supply chain security is not just a priority; it’s an imperative. Protecting the digital realm requires a holistic approach that combines technology, best practices, and a vigilant mindset.</p> <p><em>The <a href="https://www.linkedin.com/pulse/comprehensive-guide-supply-chain-attacks-web3-world-pukar-acharya/">original article</a> was published on LinkedIn.</em></p>]]></content><author><name></name></author><category term="Web3"/><category term="supply-chain-attack"/><category term="supply-chain-attack"/><category term="security"/><category term="Web3"/><summary type="html"><![CDATA[A Comprehensive Guide To Supply Chain Attacks In The Web3 World]]></summary></entry></feed>